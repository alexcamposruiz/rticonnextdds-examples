plugins {
    id 'application'
}

dependencies {
    implementation files(System.getenv('NDDSHOME') + '/lib/java/nddsjava.jar')
}

sourceSets {
    main {
        java {
            srcDirs = ['.']
        }
    }
}

task generateCode(type: Exec) {
    // Idl file
    def idlFile = 'home_automation.idl'
    // Generated types
    def generatedTypes = ['DeviceStatus']

    commandLine System.getenv('NDDSHOME') + '/bin/rtiddsgen',
        '-language', 'Java',
        '-replace',
        'home_automation.idl'

    onlyIf {
        def suffixes = [
            '.java',
            'DataReader.java',
            'DataWriter.java',
            'Seq.java',
            'TypeCode.java',
            'TypeSupport.java']

        for (String type : generatedTypes) {
            for (String suffix : suffixes) {
                if (!file(type + suffix).exists()
                    || file(idlFile).lastModified() > file(type + suffix).lastModified()) {
                    return true
                }
            }
        }

        return false
    }
}

tasks.withType(JavaCompile) {
    dependsOn 'generateCode'
}

task runPublisher(type: JavaExec) {
    group = 'application'
    description = 'Run the DeviceStatusPublisher application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'DeviceStatusPublisher'
}

task runSubscriber(type: JavaExec) {
    group = 'application'
    description = 'Run the DeviceStatusSubscriber application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'DeviceStatusSubscriber'
}

task runSubscriberWithTimestamp(type: JavaExec) {
    group = 'application'
    description = 'Run the DeviceStatusSubscriberWithTimestamp application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'DeviceStatusSubscriberWithTimestamp'
}